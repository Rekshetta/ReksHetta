if getgenv().Aiming then return getgenv().Aiming end local p = game:GetService("\80\108\97\121\101\114\115") local s = game:GetService("\87\111\114\107\115\112\97\99\101") local l = game:GetService("\71\117\105\83\101\114\118\105\99\101") local c = game:GetService("\82\117\110\83\101\114\118\105\99\101") local b = c.Heartbeat local g = p.LocalPlayer local n = s.CurrentCamera local a = g:GetMouse() local r = Drawing.new local i = Color3.fromRGB local h = Vector2.new local d = l.GetGuiInset local m = Random.new local e = math.floor local k = g.CharacterAdded local j = k.Wait local _ = n.WorldToViewportPoint local q_ = RaycastParams.new local oq = Enum.RaycastFilterType.Blacklist local fo = s.Raycast local pf = p.GetPlayers local sp = Instance.new local ls = sp("\80\97\114\116").IsDescendantOf local cl = sp("\80\97\114\116").FindFirstChildWhichIsA local bc = sp("\80\97\114\116").FindFirstChild local gb = table.remove local ng = table.insert getgenv().Aiming = { Enabled = true, ShowFOV = false, FOV = 9.8, FOVSides = 300, FOVColour = i(255, 0, 0), VisibleCheck = true, HitChance = 100, Selected = nil, SelectedPart = nil, ngb = {"\72\101\97\100", "\72\117\109\97\110\111\105\100\82\111\111\116\80\97\114\116"}, ran = { Teams = { { Team = g.Team, TeamColor = g.TeamColor, }, }, p = { g, 91318356 } } } local an = getgenv().Aiming local ra = r("\67\105\114\99\108\101") ra.Transparency = 1 ra.Thickness = 2 ra.Color = an.FOVColour ra.Filled = false an.FOVCircle = ra function an.UpdateFOV() if not (ra) then return end ra.Visible = an.ShowFOV ra.Radius = (an.FOV * 3) ra.Position = h(a.X, a.Y + d(l).Y) ra.NumSides = an.FOVSides ra.Color = an.FOVColour return ra end local ir = function(f) f = e(f) local hi = e(m().NextNumber(m(), 0, 1) * 100) / 100 return hi <= f / 100 end function an.IsPartVisible(Part, PartDescendant) local hira = g.Character or j(k) local md = n.CFrame.Position local em, OnScreen = _(n, Part.Position) if (OnScreen) then local ke = q_() ke.FilterType = oq ke.FilterDescendantsInstances = {hira, n} local dhi = fo(s, md, Part.Position - md, ke) if (dhi) then local _j = dhi.Instance local q_j = (not _j or ls(_j, PartDescendant)) return q_j end end return false end function an.IgnorePlayer(Player) local ran = an.Ignored local ira = ran.Players for em, IgnoredPlayer in ipairs(ira) do if (IgnoredPlayer == Player) then return false end end ng(ira, Player) return true end function an.UnIgnorePlayer(Player) local ran = an.Ignored local ira = ran.Players for i, IgnoredPlayer in ipairs(ira) do if (IgnoredPlayer == Player) then gb(ira, i) return true end end return false end function an.IgnoreTeam(Team, TeamColor) local ran = an.Ignored local ang = ran.Teams for em, IgnoredTeam in ipairs(ang) do if (IgnoredTeam.Team == Team and IgnoredTeam.TeamColor == TeamColor) then return false end end ng(ang, {Team, TeamColor}) return true end function an.UnIgnoreTeam(Team, TeamColor) local ran = an.Ignored local ang = ran.Teams for i, IgnoredTeam in ipairs(ang) do if (IgnoredTeam.Team == Team and IgnoredTeam.TeamColor == TeamColor) then gb(ang, i) return true end end return false end function an.TeamCheck(Toggle) if (Toggle) then return an.IgnoreTeam(g.Team, g.TeamColor) end return an.UnIgnoreTeam(g.Team, g.TeamColor) end function an.IsIgnoredTeam(Player) local ran = an.Ignored local ang = ran.Teams for em, IgnoredTeam in ipairs(ang) do if (Player.Team == IgnoredTeam.Team and Player.TeamColor == IgnoredTeam.TeamColor) then return true end end return false end function an.IsIgnored(Player) local ran = an.Ignored local ira = ran.Players for em, IgnoredPlayer in ipairs(ira) do if (typeof(IgnoredPlayer) == "\110\117\109\98\101\114" and Player.UserId == IgnoredPlayer) then return true end if (IgnoredPlayer == Player) then return true end end return an.IsIgnoredTeam(Player) end function an.Raycast(md, Destination, UnitMultiplier) if (typeof(md) == "\86\101\99\116\111\114\51" and typeof(Destination) == "\86\101\99\116\111\114\51") then if (not UnitMultiplier) then UnitMultiplier = 1 end local hir = (Destination - md).Unit * UnitMultiplier local dhi = fo(s, md, hir) if (dhi) then local mdh = dhi.Normal local emd = dhi.Material return hir, mdh, emd end end return nil end function an.Character(Player) return Player.Character end function an.CheckHealth(Player) local hira = an.Character(Player) local jk = cl(hira, "\72\117\109\97\110\111\105\100") local _jk = (jk and jk.Health or 0) return _jk > 0 end function an.Check() return (an.Enabled == true and an.Selected ~= g and an.SelectedPart ~= nil) end an.checkSilentAim = an.Check function an.GetClosestTargetPartToCursor(hira) local q_jk = an.TargetPart local oq_ = nil local foq = nil local pfo = false local spf = nil local iran = 1/0 local function q(ngb) if (typeof(ngb) == "\115\116\114\105\110\103") then ngb = bc(hira, ngb) end if not (ngb) then return end local cls, onScreen = _(n, ngb.Position) local bcl = d(l) local gbc = (h(cls.X, cls.Y - bcl.Y) - h(a.X, a.Y)).Magnitude if (gbc < iran) then oq_ = ngb foq = cls pfo = onScreen spf = gbc iran = gbc end end if (typeof(q_jk) == "\115\116\114\105\110\103") then if (q_jk == "\65\108\108") then for em, v in ipairs(hira:GetChildren()) do if not (v:IsA("\66\97\115\101\80\97\114\116")) then continue end q(v) end else q(q_jk) end end if (typeof(q_jk) == "\116\97\98\108\101") then for em, TargetPartName in ipairs(q_jk) do q(TargetPartName) end end return oq_, foq, pfo, spf end function an.GetClosestPlayerToCursor() local ngb = nil local angb = nil local rang = ir(an.HitChance) local iran = 1/0 if (not rang) then an.Selected = g an.SelectedPart = nil return g end for em, Player in ipairs(pf(p)) do local hira = an.Character(Player) if (an.IsIgnored(Player) == false and hira) then local dh, em, em, gbc = an.GetClosestTargetPartToCursor(hira) if (dh and an.CheckHealth(Player)) then if (ra.Radius > gbc and gbc < iran) then if (an.VisibleCheck and not an.IsPartVisible(dh, hira)) then continue end angb = Player iran = gbc ngb = dh end end end end an.Selected = angb an.SelectedPart = ngb end b:Connect(function() an.UpdateFOV() an.GetClosestPlayerToCursor() end) return an 
